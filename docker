 #!/bin/bash
set -eo pipefail
if [ -z "$(which devcontainer)" ]; then
    echo "devcontainer is not installed. Please install @devcontainer/cli to use this script."
    exit 1
fi
if [ -z "$(which docker)" ]; then
    echo "Docker is not installed. Please install docker to use this script."
    exit 1
fi


version="0.1.0"
command="${1:-}"

if [ -z "$command" ]; then
    echo "Usage: vault <command> [args]"
    echo "Description: script to run vault-cli in a devcontainer."
    echo "Commands:"
    echo "  up: Start the devcontainer."
    echo "  --attach: Attach to the devcontainer."
    echo "  [args]: Run vault command."
    exit 1
fi

workspace="$HOME/.vault/.devcontainer/"

mkdir -p $workspace
cd $workspace

if [ ! -f Dockerfile ];
then
cat >Dockerfile <<EOF
FROM php:8.3-cli-alpine

RUN addgroup -g 1000 devcontainer && adduser -u 1000 -S devcontainer -G devcontainer
WORKDIR /home/devcontainer
ARG PHP_EXTS="pcntl"
ARG DEBIAN_FRONTEND=noninteractive

RUN apk --no-cache update \\
    && apk --no-cache add \\
        sudo bash \\
    && docker-php-ext-install -j\$(nproc) \${PHP_EXTS} \\
    && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
RUN addgroup -S sudo \\
    && adduser devcontainer sudo \\
    && echo "devcontainer ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/devcontainer \\
    && chmod 0440 /etc/sudoers.d/devcontainer

USER devcontainer
RUN composer require surgiie/vault-cli:$version
ENV PATH=\$PATH:/home/devcontainer/vendor/bin
EOF
fi
if [ ! -f devcontainer.json ]; then
cat >devcontainer.json <<EOF
{
  "name": "vault",
  "build": {
    "context": ".",
    "dockerfile": "\${localEnv:HOME}/.vault/.devcontainer/Dockerfile"
  },
  "settings": {
    "terminal.integrated.shell.linux": "/bin/bash"
  },
  "workspaceMount": "source=\${localWorkspaceFolder},target=/home/devcontainer/.vault,type=bind,consistency=cached",
  "workspaceFolder": "/home/devcontainer/.vault",
  "remoteUser": "devcontainer",
  "containerUser": "devcontainer"
}
EOF
fi

cd .. >/dev/null

if [ $command = "up" ]; then
    echo "Starting devcontainer..."
    devcontainer up --workspace-folder .  --config $workspace/devcontainer.json
    exit;
fi

env_vars=""
for var in $(env | grep '^VAULT_CLI'); do
    var_name=$(echo "$var" | cut -d'=' -f1)
    var_value=$(echo "$var" | cut -d'=' -f2-)
    env_vars="$env_vars --remote-env $var_name=$var_value"
done

# check if --attach is passed for convenience to attach to the container.
if [ "$command" = "--attach" ]; then
    devcontainer exec --workspace-folder . --config $workspace/devcontainer.json $env_vars --remote-env PS1="devcontainer@vault â–¶ " bash
else
    devcontainer exec --workspace-folder . --config $workspace/devcontainer.json  $env_vars vault $@
fi
code=$?
cd - >/dev/null
exit $code;

